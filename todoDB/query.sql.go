// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package todoDB

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO User (
  email,
  password
) VALUES (
  ?,
  ?
)
RETURNING id, email, password
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM List WHERE id = ? AND userid = ?
`

type DeleteEntryParams struct {
	ID     int64
	Userid int64
}

func (q *Queries) DeleteEntry(ctx context.Context, arg DeleteEntryParams) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, arg.ID, arg.Userid)
	return err
}

const getList = `-- name: GetList :many
SELECT id, todo, userid FROM List WHERE userid = ?
`

func (q *Queries) GetList(ctx context.Context, userid int64) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, getList, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(&i.ID, &i.Todo, &i.Userid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const loginUser = `-- name: LoginUser :one
SELECT id, email, password FROM User WHERE email = ? AND password = ?
`

type LoginUserParams struct {
	Email    string
	Password string
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, loginUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const postList = `-- name: PostList :one
INSERT INTO List (
  todo,
  userid
) VALUES (
  ?,
  ?
)
RETURNING id, todo, userid
`

type PostListParams struct {
	Todo   string
	Userid int64
}

func (q *Queries) PostList(ctx context.Context, arg PostListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, postList, arg.Todo, arg.Userid)
	var i List
	err := row.Scan(&i.ID, &i.Todo, &i.Userid)
	return i, err
}
